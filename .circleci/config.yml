version: 2.1


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string

    steps:
      - run:
          name: Destroy backend
          when: <<parameters.when>>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.id>>
      - run:
          name: Destroy frontend
          when: <<parameters.when>>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.id>>  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
      when:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: <<parameters.when>>
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = curl -s -head "https://kvdb.io/FwFkMrXBr4Dd4PrMdeg5XU/migration_<<parameters.id>>"
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
jobs:

  install-backend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    
    steps:
      - checkout
      - run: 
          name: install dependencies
          command: |
            cd backend
            npm install
      - persist_to_workspace:
          root: .
          paths: backend/node_modules

  install-frontend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: install dependencies
          command: |
            cd frontend
            npm install
      - persist_to_workspace:
          root: .
          paths: frontend/node_modules


  build-frontend:

    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - attach_workspace:
          at: .
     - run: 
        name: Test Frontend
        command: |
          cd frontend
          npm install
          npm run test

      # Restore from cache
      # Your job code here
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - attach_workspace:
          at: .
     - run: 
        name: Test backend
        command: |
          cd backend
          npm install
          npm run test
    
  scan-frontend:
      docker:
      - image: circleci/node:13.8.0

      steps:
        - checkout
        - attach_workspace:
          at: .
        - run:
              name: Scan frontend
              command: |
                cd frontend
                npm install
                npm audit fix --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
            name: Deploy backend infrastructure
            working_directory: ./.circleci/files

            command: |
              aws cloudformation deploy \
                --template-file backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
            name: Deploy frontend infrastructure
            working_directory: ./.circleci/files
            command: |
              aws cloudformation deploy \
                --template-file frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORKFLOW_ID:0:7}    
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2c:13:7a:4d:8d:0e:c1:91:81:05:9d:4c:c3:92:25:66"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory configure-server.yml
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORKFLOW_ID:0:7} 
  run-migrations:
    docker:
      - image : circleci/node:13.8.0
      
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
      
          name: Run migrations
          
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
           
        
            

      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Will update kvdb"
              curl https://kvdb.io/FwFkMrXBr4Dd4PrMdeg5XU/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "Failed to update"
            fi
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORKFLOW_ID:0:7} 
     # Here's where you will add some code to rollback on failure 
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            cd ./frontend
            # your code here $
            export BACKEND_IP = (aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-020292405996 --recursive
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          when: on_fail
          id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2c:13:7a:4d:8d:0e:c1:91:81:05:9d:4c:c3:92:25:66"]
      - attach_workspace:
          at: .
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          when: on_fail
          id: ${CIRCLE_WORKFLOW_ID:0:7} 

      - revert-migrations:
          when: on_fail
          id: ${CIRCLE_WORKFLOW_ID:0:7} 
      # Here's where you will add some code to rollback on failure  



workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-frontend:
          requires: [install-frontend-dependencies]
      - build-backend:
          requires: [install-backend-dependencies]
      - test-backend:
          requires: [build-backend]
      - test-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-backend:
      #     requires:
      #       - run-migrations
      # - deploy-frontend:
      #     requires:
      #       - run-migrations